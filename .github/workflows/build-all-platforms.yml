name: Build EasyTier for All Platforms

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: easytier-linux-x86_64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: easytier-windows-x86_64
            
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: easytier-mac-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler llvm clang pkg-config libx11-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libgtk-3-dev

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      # 4. [已修正] 智能编译
      - name: Build binaries
        shell: bash
        run: |
          # 如果是 macOS ARM 平台，则只编译 core 和 cli
          if [ "${{ matrix.target }}" == "aarch64-apple-darwin" ]; then
            echo "Building for macOS ARM. Skipping GUI."
            cargo build --release --target ${{ matrix.target }} --bin easytier-core --bin easytier-cli
          else
            # 对于其他所有平台，编译全部
            echo "Building all binaries for ${{ matrix.target }}."
            cargo build --release --target ${{ matrix.target }}
          fi

      # 5. [已修正] 智能打包
      - name: Prepare Artifacts
        shell: bash
        run: |
          ARTIFACT_DIR="artifacts"
          mkdir -p $ARTIFACT_DIR
          
          EXE_SUFFIX=""
          if [ "${{ runner.os }}" == "Windows" ]; then
            EXE_SUFFIX=".exe"
          fi
          
          # 复制 core 和 cli
          cp target/${{ matrix.target }}/release/easytier-core$EXE_SUFFIX $ARTIFACT_DIR/
          cp target/${{ matrix.target }}/release/easytier-cli$EXE_SUFFIX $ARTIFACT_DIR/
          
          # 只有在 GUI 文件存在时才复制
          GUI_FILE="target/${{ matrix.target }}/release/easytier-gui$EXE_SUFFIX"
          if [ -f "$GUI_FILE" ]; then
            echo "GUI file found. Copying..."
            cp "$GUI_FILE" $ARTIFACT_DIR/
          else
            echo "GUI file not found. Skipping."
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/
