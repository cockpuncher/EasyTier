# 工作流名称
name: Build EasyTier for All Platforms

# 触发条件：允许我们从 Actions 页面手动点击按钮来运行
on:
  workflow_dispatch:

jobs:
  # 定义一个名为 "build" 的任务
  build:
    # 使用 "matrix" 策略，同时在多个系统上运行
    strategy:
      matrix:
        include:
          # --- Linux x86_64 配置 ---
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: easytier-linux-x86_64
            
          # --- Windows x86_64 配置 ---
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: easytier-windows-x86_64
            
          # --- macOS ARM64 (Apple Silicon) 配置 ---
          - os: macos-14 # 这是苹果 M1/M2/M3 芯片的 ARM 虚拟机
            target: aarch64-apple-darwin
            artifact_name: easytier-mac-arm64

    # 指定虚拟机环境
    runs-on: ${{ matrix.os }}

    # 任务步骤
    steps:
      # 1. 下载仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 安装 Rust 工具链，并添加指定的目标平台
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # 3. 安装特定系统的编译依赖
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler llvm clang pkg-config libx11-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libgtk-3-dev

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      # 4. 编译所有二进制文件 (core, cli, gui)
      - name: Build binaries
        run: cargo build --release --target ${{ matrix.target }}

      # 5. 将编译好的文件整理到一个文件夹，方便打包
      - name: Prepare Artifacts
        shell: bash
        run: |
          ARTIFACT_DIR="artifacts"
          mkdir -p $ARTIFACT_DIR
          # 根据不同系统处理文件后缀名
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp target/${{ matrix.target }}/release/easytier-core.exe $ARTIFACT_DIR/
            cp target/${{ matrix.target }}/release/easytier-cli.exe $ARTIFACT_DIR/
            cp target/${{ matrix.target }}/release/easytier-gui.exe $ARTIFACT_DIR/
          else
            cp target/${{ matrix.target }}/release/easytier-core $ARTIFACT_DIR/
            cp target/${{ matrix.target }}/release/easytier-cli $ARTIFACT_DIR/
            cp target/${{ matrix.target }}/release/easytier-gui $ARTIFACT_DIR/
          fi

      # 6. 上传整理好的文件夹作为构建产物 (Artifact)
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/
